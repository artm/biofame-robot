[*] open / close mc when button's pressed
[*] press the button on start
[*] close mc on exit

* * *

need "MC_CHECK_RESULT" and a generic system of throwing, logging and catching exceptions.

* * *

displays:
[x] lcnt
[x] speed
[x] input ticks

controls:
[x] default axis parameters
[x] stop button
[x] go cw/ccw buttons
[x] output ticks

* * *

had to prepare motorc like:

PATH=/c/MinGW/bin/:/c/Program\ Files/CMake\ 2.8/bin MAX_SDK_ROOT=~/src/sdk/MaxSDK-5.1.1/ cmake ..
/motorc -G "CodeBlocks - MinGW Makefiles" -DBOOST_ROOT=~/src/sdk/boost_1_44_0/

after which could import the project into Qt Creator

* * *

[x] an object encapsulating a motor
    all communication with the motor goes via this object
    it also takes care that state is displayed by the GUI
[x] engage motors on open
    [x] need a way to send outputs to motors
    [x] need to display output states...
    [x] need to connect button group events, not what I have now
[x] without any feedback send stop and continuous motion commands
[x] feedback: want to pick up the axis parameters...
[x] parameter settage
[x] save axis parameters to eprom just before closing...

[x] poll:
    [x] counter
    [x] speed
    [x] inputs

no separate thread yet, just a timer that polls everything important for every motor.

[x] circular calibration
    [x] panic button
    [x] calibrate button
    [x] axis knows how to calibrate itself
    [x] input changes send signals or events
    [ ] calc and show pulse <=> degrees
    [ ] inv and offset controls for circular axes
    [ ] posing API in degrees

[ ] face detection / tracking
    [x] video input
    [ ] video preprocessing:
        [x] deinterlace (fast scale down by 2x2)
        [x] greyscale
        [ ] normalize
    [x] video display (fast scale to 320 width)
    [x] detect faces and display detection parameters

* * *

pose estimation. this is only relevant to calibrated axes - for now the two 360 degree circular ones.

[x] calibration: assume initial pose is known (0)
    [x] when first hit the trigger remember distance from 0 to trigger and clear pos counter
    [x] when hit the trigger second time remember the circle length
    [x] save offset and length to the settings
[x] maintaining the counter
    [x] maintain the motor direction
    [x] when moving in positive direction and the trigger goes 1-0 spring to 0
    [x] when moving in negative direction and the trigger goes 0-1 spring to circle length
[x] normal start up
    [x] load axes parameters
    [x] go until hit the trigger, from here on pose can be estimated
    [x] maintain the direction of every motion
[ ] convert pos to angle (pose estimation)

* * *

[ ] video + graphics on a QGraphicsView.
    [ ] May be a new QGraphicsItem for the video and its children in pixel coordinates...
[ ] save/load setings
    [x] video processing
    [x] robot motion
    [ ] robot calibration values
    [ ] verilook

